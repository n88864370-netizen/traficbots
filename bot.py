# bot.py
# -*- coding: utf-8 -*-
"""
–°–ø—Ä–æ—â–µ–Ω–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –∞—Ä–±—ñ—Ç—Ä–∞–∂-–∫–æ–º–∞–Ω–¥–∏:
- –°—Ç–∞—Ä—Ç–æ–≤–µ –º–µ–Ω—é: –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É, –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É
- "–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É": –±–æ—Ç —Å—Ç–≤–æ—Ä—é—î –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ —ñ–Ω–≤–∞–π—Ç-–ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª —ñ–∑ –∑–∞—è–≤–∫–æ—é –Ω–∞ –≤—Å—Ç—É–ø
- "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É": —è–∫—â–æ –≤–∂–µ —î —Ö–æ—á–∞ –± –æ–¥–Ω–∞ –∑–∞—è–≤–∫–∞ ‚Üí –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è –º–µ–Ω—é –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–∫–∞
- –ú–µ–Ω—é –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–∫–∞: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –ú–æ—è —Ä–µ—Ñ. —Å—Å–∏–ª–∫–∞, –ó–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–ø–ª–∞—Ç—É, –ó–≤'—è–∑–æ–∫ –∑ –≤–ª–∞—Å–Ω–∏–∫–æ–º, –£–≤—ñ–π—Ç–∏ –≤ —á–∞—Ç
- SQLite –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

–ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –Ω–∏–∂—á–µ (API_TOKEN, CHANNEL_ID, CHANNEL_LINK, CHAT_LINK, OWNER_ID).
"""

import logging
import sqlite3

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ChatInviteLink

# ===================== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø =====================
API_TOKEN = "8353432332:AAE-FYyo0oekiSz1BmGizXTh8X0HVD9KPUQ"
CHANNEL_ID = -1002646229900
CHANNEL_LINK = "https://t.me/+6M02Kc1z0t80Y2Zi"
CHAT_LINK = "https://t.me/+bN65FTKvhRllZjAy"
OWNER_ID = 7939185150 

AUTO_APPROVE = True
PAYOUT_PER_REQUEST = 0.40

# ========================================================

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# ===================== –ë–ê–ó–ê –î–ê–ù–ò–• =====================
DB_PATH = "arbit_bot.db"

SCHEMA_USERS = """
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    ref_link TEXT,
    referrals INTEGER DEFAULT 0,
    earnings REAL DEFAULT 0.0
);
"""

SCHEMA_INVITES = """
CREATE TABLE IF NOT EXISTS invite_links (
    invite_link TEXT PRIMARY KEY,
    owner_id INTEGER NOT NULL
);
"""


def db_init():
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute(SCHEMA_USERS)
        cur.execute(SCHEMA_INVITES)
        conn.commit()


def get_user(user_id: int):
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("SELECT user_id, ref_link, referrals, earnings FROM users WHERE user_id=?", (user_id,))
        return cur.fetchone()


def ensure_user(user_id: int):
    if not get_user(user_id):
        with sqlite3.connect(DB_PATH) as conn:
            cur = conn.cursor()
            cur.execute("INSERT INTO users(user_id) VALUES(?)", (user_id,))
            conn.commit()


def set_user_ref_link(user_id: int, link: str):
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("UPDATE users SET ref_link=? WHERE user_id=?", (link, user_id))
        conn.commit()


def upsert_invite_link(invite_link: str, owner_id: int):
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("INSERT OR REPLACE INTO invite_links(invite_link, owner_id) VALUES(?, ?)", (invite_link, owner_id))
        conn.commit()


def get_invite_owner(invite_link: str):
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("SELECT owner_id FROM invite_links WHERE invite_link=?", (invite_link,))
        row = cur.fetchone()
        return row[0] if row else None


def add_referral_and_earn(owner_id: int, amount: float):
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute(
            "UPDATE users SET referrals = COALESCE(referrals,0) + 1, earnings = COALESCE(earnings,0) + ? WHERE user_id=?",
            (amount, owner_id),
        )
        conn.commit()

# ===================== –ö–ù–û–ü–ö–ò =====================

def start_kb():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É", callback_data="submit_request"),
        InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É", callback_data="check_request"),
    )
    return kb


def arbitrage_kb():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
        InlineKeyboardButton("üîó –ú–æ—è —Ä–µ—Ñ. —Å—Å–∏–ª–∫–∞", callback_data="ref_link"),
        InlineKeyboardButton("üí∞ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–ø–ª–∞—Ç—É", callback_data="payout"),
        InlineKeyboardButton("üí¨ –ó–≤'—è–∑–æ–∫ –∑ –≤–ª–∞—Å–Ω–∏–∫–æ–º", url=f"tg://user?id={OWNER_ID}"),
        InlineKeyboardButton("üí≠ –£–≤—ñ–π—Ç–∏ –≤ —á–∞—Ç", url=CHAT_LINK),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="back_to_start"),
    )
    return kb

# ===================== –•–ï–õ–ü–ï–† =====================
async def create_or_get_user_invite(user_id: int) -> str:
    ensure_user(user_id)
    row = get_user(user_id)
    if row and row[1]:
        return row[1]

    link_obj: ChatInviteLink = await bot.create_chat_invite_link(
        chat_id=CHANNEL_ID,
        name=f"ref_{user_id}",
        creates_join_request=True,
    )
    link = link_obj.invite_link
    set_user_ref_link(user_id, link)
    upsert_invite_link(link, owner_id=user_id)
    return link

# ===================== –•–ï–ù–î–õ–ï–†–ò =====================
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    ensure_user(message.from_user.id)
    await message.answer("üëã –í—ñ—Ç–∞—é! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=start_kb())


@dp.callback_query_handler(lambda c: c.data == "back_to_start")
async def back_to_start(callback: types.CallbackQuery):
    await callback.message.edit_text("üëã –í—ñ—Ç–∞—é! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=start_kb())


@dp.callback_query_handler(lambda c: c.data == "submit_request")
async def submit_request(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    link = await create_or_get_user_invite(user_id)
    await callback.message.edit_text(
        f"üîó –¢–≤–æ—è —Ä–µ—Ñ. —Å—Å–∏–ª–∫–∞ –¥–ª—è –ø–æ–¥–∞–Ω–Ω—è –∑–∞—è–≤–æ–∫:\n{link}\n\n–ß–µ–∫–∞–π, –ø–æ–∫–∏ –ø–æ –Ω—ñ–π –ø–æ–¥–∞–¥—É—Ç—å –∑–∞—è–≤–∫—É.",
        reply_markup=start_kb(),
    )


@dp.callback_query_handler(lambda c: c.data == "check_request")
async def check_request(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    row = get_user(user_id)
    referrals = (row[2] if row else 0) or 0

    if referrals > 0:
        await callback.message.edit_text("üîì –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞! –î–æ—Å—Ç—É–ø –¥–æ –º–µ–Ω—é –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–∫–∞:", reply_markup=arbitrage_kb())
    else:
        await callback.message.edit_text("‚ùóÔ∏è –ó–∞—è–≤–æ–∫ —â–µ –Ω–µ–º–∞—î. –ü–æ–¥—ñ–ª–∏—Å—å —Å–≤–æ—î—é —Å—Å–∏–ª–∫–æ—é —Ç–∞ –∑–∞—á–µ–∫–∞–π.", reply_markup=start_kb())


@dp.callback_query_handler(lambda c: c.data == "ref_link")
async def show_ref_link(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    link = await create_or_get_user_invite(user_id)
    await callback.message.edit_text(f"üîó –¢–≤–æ—è —Ä–µ—Ñ. —Å—Å–∏–ª–∫–∞:\n{link}", reply_markup=arbitrage_kb())


@dp.callback_query_handler(lambda c: c.data == "stats")
async def stats(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    row = get_user(user_id)
    referrals = (row[2] if row else 0) or 0
    earnings = (row[3] if row else 0.0) or 0.0
    text = f"üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>:\nüî¢ –ó–∞—è–≤–æ–∫: {referrals}\nüíµ –ó–∞—Ä–æ–±—ñ—Ç–æ–∫: {earnings:.2f} $"
    await callback.message.edit_text(text, reply_markup=arbitrage_kb())


@dp.callback_query_handler(lambda c: c.data == "payout")
async def payout(callback: types.CallbackQuery):
    await callback.message.edit_text("üí∞ –î–ª—è –≤–∏–ø–ª–∞—Ç–∏ –∑–≤'—è–∂–∏—Å—å –∑ –≤–ª–∞—Å–Ω–∏–∫–æ–º:", reply_markup=arbitrage_kb())


# ===================== –û–ë–†–û–ë–ö–ê –ó–ê–Ø–í–û–ö –ù–ê –í–°–¢–£–ü =====================
@dp.chat_join_request_handler()
async def handle_join_request(join_req: types.ChatJoinRequest):
    try:
        inv: ChatInviteLink = join_req.invite_link
        link_str = inv.invite_link if inv else None
        applicant = join_req.from_user
        owner_id = get_invite_owner(link_str) if link_str else None

        if owner_id:
            add_referral_and_earn(owner_id, PAYOUT_PER_REQUEST)
            try:
                await bot.send_message(
                    owner_id,
                    f"üÜï –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –ø–æ —Ç–≤–æ—ó–π —Å—Å–∏–ª—Ü—ñ!\n–í—ñ–¥: {applicant.full_name} (@{applicant.username or '‚Äî'})"
                )
            except Exception:
                pass

        if AUTO_APPROVE:
            await bot.approve_chat_join_request(chat_id=join_req.chat.id, user_id=applicant.id)

    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞—è–≤–∫–∏: %s", e)


# ===================== –ó–ê–ü–£–°–ö =====================
if __name__ == "__main__":
    db_init()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ‚Ä¶")
    executor.start_polling(dp, skip_updates=True)
